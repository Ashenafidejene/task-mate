datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// next auth
model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        DateTime?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// custom models
model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  phoneNumber   String?
  image         String?
  sessions      Session[]
  tasks         Task[] // 3 maximum 
  role          Role      @default(TEAM_MEMBER)
  Message       Message[]
  projects      Project[] @relation("createdBy") //2 maximum
  projectId     String?
  Project       Project?  @relation(fields: [projectId], references: [id])
  Account       Account[]
}

model Stakeholder {
  email   String  @id @default(cuid())
  project Project @relation(fields: [email], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Role {
  TEAM_MANAGER
  TEAM_MEMBER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id           String        @id @default(cuid())
  title        String        @unique
  creatorId    String
  coverImage   String        @db.Text
  description  String        @db.Text
  tasks        Task[]
  createdBy    User          @relation("createdBy", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // dueDate      DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  users        User[]
  stakeHolders Stakeholder[] //to be seen
  @@index([title])
}

model Task {
  id        String   @id @default(cuid())
  title     String // changed  it from name to Title
  projectId String
  progress  Progress @default(NOT_STARTED) // change to enum {notstarted, inprogress, finished}

  assignedTo  User[]
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueDate     DateTime
  SubTask     SubTask[]
}

enum Progress {
  NOT_STARTED
  IN_PROGRESS
  FINISHED
}

model SubTask {
  id       String   @id @default(cuid())
  title    String
  taskId   String
  progress Progress @default(NOT_STARTED)

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  teamId    String
  user      User     @relation(fields: [userId], references: [id])
}
